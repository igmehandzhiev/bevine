{"version":3,"sources":["graphics/logo_white.png","services/Fetch.js","components/GaugeWrapper.jsx","components/HumiditySensor.jsx","components/TemperatureSensor.jsx","components/MoistureSensor.jsx","components/RadialChart.jsx","components/RadialChartWrapper.jsx","components/MildewIndex.jsx","components/BlackRootIndex.jsx","components/DiseasesPredictionsChart.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Fetch","url","settings","Promise","resolve","reject","fetch","concat","Object","assign","credentials","then","response","catch","error","GaugeWrapper","_this$props","this","props","_this$props$header","header","_this$props$height","height","_this$props$width","width","_this$props$value","value","className","_this$props$color","color","_this$props$min","min","_this$props$max","max","valueFormatter","react_default","a","createElement","Card","raised","fluid","Content","textAlign","Header","Gauge_default","label","valueLabelStyle","fontSize","React","PureComponent","HumiditySensor","_React$Component","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","_this2","setInterval","fetchHumidity","_this3","redirect","json","data","status","setState","colorHex","getHexColor","components_GaugeWrapper","v","Component","TemperatureSensor","fetchTemperature","MoistureSensor","fetchMoisture","RadialChart","componentWillReceiveProps","nextProps","series","undefined","_this$props$startAngl","startAngle","_this$props$endAngle","endAngle","_this$props$valueFont","valueFontSize","options","plotOptions","radialBar","track","background","strokeWidth","margin","shadow","enabled","top","left","opacity","blur","dataLabels","name","show","offsetY","fill","colors","type","gradient","shade","shadeIntensity","inverseColors","stops","_this$state","id","react_apexcharts_min_default","RadialChartWrapper","components_RadialChart","MildewIndex","fetchMildewData","components_RadialChartWrapper","BlackRootIndex","fetchBlackRootData","chartOptions","chart","toolbar","stroke","curve","title","text","style","align","grid","borderColor","row","markers","size","xaxis","categories","Date","getDate","getMonth","getFullYear","yaxis","legend","position","horizontalAlign","floating","offsetX","DiseasesPredictionsChart","fetchIndexes","App","Container","Menu","fixed","inverted","Image","src","logo","alt","Item","fitted","Grid","container","centered","Row","columns","Column","HumiditySensor_HumiditySensor","TemperatureSensor_TemperatureSensor","MoistureSensor_MoistureSensor","components_MildewIndex","components_BlackRootIndex","Divider","components_DiseasesPredictionsChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cdefce65.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_white.84bb471c.png\";","class Fetch {\n  static redirect(url, settings) {\n    return new Promise((resolve, reject) => {\n      fetch(\n        `http://localhost:8000${url}`,\n        Object.assign(\n          {\n            credentials: \"same-origin\"\n          },\n          settings\n        )\n      )\n        .then(response => {\n          resolve(response);\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  }\n}\n\nexport { Fetch };\n","import React from \"react\";\nimport { Card } from \"semantic-ui-react\";\nimport Gauge from \"react-svg-gauge\";\n\nclass GaugeWrapper extends React.PureComponent {\n  render() {\n    const {\n      header = \"DATA\",\n      height = 160,\n      width = 200,\n      value = 0,\n      className,\n      color = \"green\",\n      min = 0,\n      max = 100,\n      valueFormatter\n    } = this.props;\n    return (\n      <Card raised fluid className={className}>\n        <Card.Content textAlign=\"center\">\n          <Card.Header>{header}</Card.Header>\n        </Card.Content>\n        <Card.Content fluid textAlign=\"center\">\n          <Gauge\n            value={value}\n            width={width}\n            height={height}\n            label=\"\"\n            color={color}\n            min={min}\n            max={max}\n            valueFormatter={valueFormatter}\n            valueLabelStyle={{ fontSize: \"24px\" }}\n          />\n        </Card.Content>\n      </Card>\n    );\n  }\n}\n\nexport default GaugeWrapper;\n","import React from \"react\";\nimport { Fetch } from \"../services/Fetch\";\nimport GaugeWrapper from \"./GaugeWrapper\";\n\nconst getHexColor = value => {\n  if (value < 49) {\n    return \"#77be47\";\n  }\n  if (value < 69) {\n    return \"#beba11\";\n  }\n  return \"#b42400\";\n};\n\nexport class HumiditySensor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0\n    };\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.fetchHumidity();\n    }, 3000);\n  }\n\n  fetchHumidity() {\n    Fetch.redirect(\"/data/humidity\")\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        if (data.status !== 403) {\n          this.setState({\n            value: data\n          });\n        }\n      });\n  }\n\n  render() {\n    const { value } = this.state;\n    const colorHex = `${getHexColor(value)}`;\n    return (\n      <GaugeWrapper\n        value={value}\n        width={200}\n        height={160}\n        header=\"HUMIDITY\"\n        color={colorHex}\n        min={0}\n        max={100}\n        valueFormatter={v => `${v}%`}\n      />\n    );\n  }\n}\n\nexport default HumiditySensor;\n","import React from \"react\";\nimport { Fetch } from \"../services/Fetch\";\nimport GaugeWrapper from \"./GaugeWrapper\";\n\nconst getHexColor = value => {\n  if (value < 13) {\n    return \"#00a191\";\n  }\n  if (value < 37) {\n    return \"#77be47\";\n  }\n  return \"#b42400\";\n};\n\nexport class TemperatureSensor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0\n    };\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.fetchTemperature();\n    }, 3000);\n  }\n\n  fetchTemperature() {\n    Fetch.redirect(\"/data/temperature\")\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        if (data.status !== 403) {\n          this.setState({\n            value: data\n          });\n        }\n      });\n  }\n\n  render() {\n    const { value } = this.state;\n    const colorHex = `${getHexColor(value)}`;\n    return (\n      <GaugeWrapper\n        value={value}\n        width={200}\n        height={160}\n        header=\"TEMPERATURE\"\n        color={colorHex}\n        min={-30}\n        max={60}\n        valueFormatter={v => `${v}°C`}\n      />\n    );\n  }\n}\n\nexport default TemperatureSensor;\n","import React from \"react\";\nimport { Fetch } from \"../services/Fetch\";\nimport GaugeWrapper from \"./GaugeWrapper\";\n\nconst getHexColor = value => {\n  if (value < 0.7) {\n    return \"#77be47\";\n  }\n  return \"#e79419\";\n};\n\nexport class MoistureSensor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0\n    };\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.fetchMoisture();\n    }, 3000);\n  }\n\n  fetchMoisture() {\n    Fetch.redirect(\"/data/moisture\")\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        if (data.status !== 403) {\n          this.setState({\n            value: data\n          });\n        }\n      });\n  }\n\n  render() {\n    const { value } = this.state;\n    const colorHex = `${getHexColor(value)}`;\n    return (\n      <GaugeWrapper\n        value={value}\n        width={200}\n        height={160}\n        header=\"MOISTURE\"\n        color={colorHex}\n        min={0}\n        max={1}\n      />\n    );\n  }\n}\n\nexport default MoistureSensor;\n","import React from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\n\nclass RadialChart extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      startAngle = 0,\n      endAngle = 360,\n      value = 33,\n      height = 160,\n      valueFontSize = \"30px\"\n    } = this.props;\n    this.state = {\n      options: {\n        plotOptions: {\n          radialBar: {\n            startAngle,\n            endAngle,\n            track: {\n              background: \"#e7e7e7\",\n              strokeWidth: \"97%\",\n              margin: 5, // margin is in pixels\n              shadow: {\n                enabled: true,\n                top: 2,\n                left: 0,\n                color: \"#999\",\n                opacity: 1,\n                blur: 2\n              }\n            },\n            dataLabels: {\n              name: {\n                show: false\n              },\n              value: {\n                offsetY: 20,\n                fontSize: valueFontSize\n              }\n            }\n          }\n        },\n        fill: {\n          colors: [\n            data => {\n              // eslint-disable-next-line no-shadow\n              const { value } = data;\n              if (value < 33) {\n                return \"#73d33d\";\n              }\n              if (value < 77) {\n                return \"#b4c028\";\n              }\n              return \"#8a1d00\";\n            }\n          ],\n          type: \"gradient\",\n          gradient: {\n            shade: \"light\",\n            shadeIntensity: 0.2,\n            inverseColors: false,\n            stops: [0, 33, 77]\n          }\n        }\n      },\n      series: [value],\n      height\n    };\n  }\n\n  componentWillReceiveProps = nextProps => {\n    const { value } = nextProps;\n    this.setState({\n      series: [value === undefined ? 0 : value]\n    });\n  };\n\n  render() {\n    const { series, options, height } = this.state;\n    return (\n      <div id=\"chart\">\n        <ReactApexChart\n          options={options}\n          series={series}\n          type=\"radialBar\"\n          height={height}\n        />\n      </div>\n    );\n  }\n}\n\nexport default RadialChart;\n","import React from \"react\";\nimport { Card } from \"semantic-ui-react\";\nimport RadialChart from \"./RadialChart\";\n\nclass RadialChartWrapper extends React.PureComponent {\n  render() {\n    const {\n      header,\n      endAngle,\n      height,\n      startAngle,\n      value,\n      valueFontSize,\n      className\n    } = this.props;\n    return (\n      <Card raised fluid className={className}>\n        <Card.Content>\n          <Card.Header>{header}</Card.Header>\n        </Card.Content>\n        <Card.Content fluid>\n          <RadialChart\n            startAngle={startAngle}\n            endAngle={endAngle}\n            height={height}\n            value={value}\n            valueFontSize={valueFontSize}\n          />\n        </Card.Content>\n      </Card>\n    );\n  }\n}\n\nexport default RadialChartWrapper;\n","import React from \"react\";\nimport RadialChartWrapper from \"./RadialChartWrapper\";\nimport { Fetch } from \"../services/Fetch\";\n\nclass MildewIndex extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: 0\n    };\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.fetchMildewData();\n    }, 3000);\n  }\n\n  fetchMildewData() {\n    Fetch.redirect(\"/data/downyMildewIndex\")\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        if (data.status !== 403) {\n          this.setState({\n            value: data\n          });\n        }\n      });\n  }\n\n  render() {\n    const { value } = this.state;\n\n    return (\n      <RadialChartWrapper\n        className=\"mildew\"\n        header=\"DOWNY MILDEW RISK\"\n        // startAngle={0}\n        // endAngle={180}\n        value={value}\n        height={350}\n        valueFontSize=\"48px\"\n      />\n    );\n  }\n}\n\nexport default MildewIndex;\n","import React from \"react\";\nimport RadialChartWrapper from \"./RadialChartWrapper\";\nimport { Fetch } from \"../services/Fetch\";\n\nclass BlackRootIndex extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: 0\n    };\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.fetchBlackRootData();\n    }, 3000);\n  }\n\n  fetchBlackRootData() {\n    Fetch.redirect(\"/data/blackRotIndex\")\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        if (data.status !== 403) {\n          this.setState({\n            value: data\n          });\n        }\n      });\n  }\n\n  render() {\n    const { value } = this.state;\n\n    return (\n      <RadialChartWrapper\n        className=\"blackRoot\"\n        header=\"BLACK ROOT RISK\"\n        // startAngle={0}\n        // endAngle={180}\n        value={value}\n        height={350}\n        valueFontSize=\"48px\"\n      />\n    );\n  }\n}\n\nexport default BlackRootIndex;\n","import React from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { Fetch } from \"../services/Fetch\";\n\nconst THREE_HOURS = 10800000;\nconst chartOptions = {\n  chart: {\n    id: \"mychart\",\n    shadow: {\n      enabled: true,\n      color: \"#000\",\n      top: 18,\n      left: 7,\n      blur: 10,\n      opacity: 1\n    },\n    toolbar: {\n      show: false\n    }\n  },\n  colors: [\"#77B6EA\", \"#545454\"],\n  dataLabels: {\n    enabled: true\n  },\n  stroke: {\n    curve: \"smooth\"\n  },\n  title: {\n    text: \"Diseases predictions\",\n    style: {\n      fontSize: \"26px\"\n    },\n    align: \"left\"\n  },\n  grid: {\n    borderColor: \"#e7e7e7\",\n    row: {\n      colors: [\"#f3f3f3\", \"transparent\"], // takes an array which will be repeated on columns\n      opacity: 0.5\n    }\n  },\n  markers: {\n    size: 6\n  },\n  xaxis: {\n    // Awful, but working as we want (:\n    categories: [\n      `${new Date().getDate()}.${new Date().getMonth() +\n        1}.${new Date().getFullYear()}`,\n      `${new Date().getDate() + 1}.${new Date().getMonth() +\n        1}.${new Date().getFullYear()}`,\n      `${new Date().getDate() + 2}.${new Date().getMonth() +\n        1}.${new Date().getFullYear()}`,\n      `${new Date().getDate() + 3}.${new Date().getMonth() +\n        1}.${new Date().getFullYear()}`,\n      `${new Date().getDate() + 4}.${new Date().getMonth() +\n        1}.${new Date().getFullYear()}`\n    ],\n    title: {\n      text: \"Date\"\n    }\n  },\n  yaxis: {\n    min: 0,\n    max: 100\n  },\n  legend: {\n    position: \"top\",\n    horizontalAlign: \"right\",\n    floating: true,\n    offsetY: -25,\n    offsetX: -5\n  }\n};\n\nexport class DiseasesPredictionsChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      series: [\n        {\n          name: \"Mildew Index\",\n          data: [54, 89, 33, 76, 62]\n        },\n        {\n          name: \"Black Rot Index\",\n          data: [12, 21, 44, 58, 87]\n        }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.fetchIndexes();\n    }, THREE_HOURS);\n  }\n\n  fetchIndexes() {\n    Fetch.redirect(\"/data/diseasesPredictions\")\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        if (data.status !== 403) {\n          this.setState({\n            series: data\n          });\n        }\n      });\n  }\n\n  render() {\n    const { series } = this.state;\n\n    return (\n      <div id=\"chart\">\n        <ReactApexChart\n          options={chartOptions}\n          series={series}\n          type=\"line\"\n          height=\"400\"\n          width=\"700\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default DiseasesPredictionsChart;\n","import React from \"react\";\nimport {\n  Container,\n  Image,\n  Grid,\n  Divider,\n  Menu,\n  Card,\n  Accordion,\n  Icon\n} from \"semantic-ui-react\";\nimport logo from \"./graphics/logo_white.png\";\nimport \"./css/App.css\";\nimport { HumiditySensor } from \"./components/HumiditySensor\";\nimport { TemperatureSensor } from \"./components/TemperatureSensor\";\nimport { MoistureSensor } from \"./components/MoistureSensor\";\nimport MildewIndex from \"./components/MildewIndex\";\nimport BlackRootIndex from \"./components/BlackRootIndex\";\nimport DiseasesPredictionsChart from \"./components/DiseasesPredictionsChart\";\n\nfunction App() {\n  return (\n    <Container>\n      <Menu\n        className=\"nav-bar\"\n        fixed=\"top\"\n        size=\"small\"\n        inverted\n        color=\"b92c2c\"\n      >\n        <Menu.Header className=\"logo-nav-bar\">\n          <Image src={logo} className=\"App-logo\" alt=\"logo\" />\n        </Menu.Header>\n        <Menu.Item className=\"logo-nav-bar\" fitted=\"horizontally\">\n          {/* TODO: Make that centered and remove right border */}\n          <h1 id=\"vision\">We make vines talk</h1>\n        </Menu.Item>\n      </Menu>\n      <Grid>\n        <Grid container id=\"sensors-grid\" textAlign=\"center\" centered>\n          <Grid.Row columns={3}>\n            <Grid.Column>\n              <HumiditySensor />\n            </Grid.Column>\n            <Grid.Column>\n              <TemperatureSensor />\n            </Grid.Column>\n            <Grid.Column>\n              <MoistureSensor />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row columns={2}>\n            <Grid.Column>\n              <MildewIndex />\n            </Grid.Column>\n            <Grid.Column>\n              <BlackRootIndex />\n            </Grid.Column>\n          </Grid.Row>\n          <Divider />\n          <Grid.Row>\n            <DiseasesPredictionsChart/>\n          </Grid.Row>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}